generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model chat {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content      String
  is_anonymous Boolean
  user_id      String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model coupon {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String     @db.VarChar(255)
  value      Int
  user_id    String     @db.Uuid
  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @default(now()) @db.Timestamp(6)
  user       user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  purchase   purchase[]
}

model invite {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invite_date     DateTime     @default(now()) @db.Timestamp(6)
  role            String       @db.VarChar(255)
  organization_id String       @db.Uuid
  user_id         String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  invite      invite[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model purchase {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  purchase_date DateTime @default(now()) @db.Timestamp(6)
  coupon_id     String   @db.Uuid
  user_id       String   @db.Uuid
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  coupon        coupon   @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  chat         chat[]
  coupon       coupon[]
  invite       invite[]
  organization organization[]
  purchase     purchase[]
}
